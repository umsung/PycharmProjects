
全局配置

user nobody nobody;    # user是个主模块指令，指定Nginx Worker进程运行用户以及用户组，默认由nobody账号运行。
worker_processes 2;   # worker_processes是个主模块指令，指定了Nginx要开启的进程数。每个Nginx进程平均耗费10M~12M内存。建议指定和CPU的数量一致即可
error_log logs/error.log notice;   # error_log是个主模块指令，用来定义全局错误日志文件。日志输出级别有debug、info、notice、warn、error、crit可供选择，其中，debug输出日志最为最详细，而crit输出日志最少。
pid logs/nginx.pid;   #  pid是个主模块指令，用来指定进程pid的存储文件位置。
worker_rlimit_nofile 65535;  #  worker_rlimit_nofile用于绑定worker进程和CPU， Linux内核2.4以上可用。
 

events事件指令

events{      #events事件指令是设定Nginx的工作模式及连接数上限：
      use epoll;  # use是个事件模块指令，用来指定Nginx的工作模式。Nginx支持的工作模式有select、poll、kqueue、epoll、rtsig和/dev/poll。其中select和poll都是标准的工作模式，kqueue和epoll是高效的工作模式，不同的是epoll用在Linux平台上，而kqueue用在BSD系统中。对于Linux系统，epoll工作模式是首选
      worker_connections 65536;   worker_connections也是个事件模块指令，用于定义Nginx每个进程的最大连接数，默认是1024。


HTTP服务器配置

http{
http{
      include conf/mime.types;    # include是个主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度。类似于Apache中的include方法。
      default_type application/octet-stream;   # default_type属于HTTP核心模块指令，这里设定默认类型为二进制流，也就是当文件类型未定义时使用这种方式，例如在没有配置PHP环境时，Nginx是不予解析的，此时，用浏览器访问PHP文件就会出现下载窗口。
      log_format main '$remote_addr - $remote_user [$time_local] '
      '"$request" $status $bytes_sent '
      '"$http_referer" "$http_user_agent" '
      '"$gzip_ratio"';
      log_format download '$remote_addr - $remote_user [$time_local] '
      '"$request" $status $bytes_sent '
      '"$http_referer" "$http_user_agent" '
      '"$http_range" "$sent_http_content_range"';
      client_max_body_size 20m;
      client_header_buffer_size 32K;
      large_client_header_buffers 4 32k;
      Sendfile on;   # sendfile参数用于开启高效文件传输模式。将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞；
      tcp_nopush on;
      tcp_nodelay on; 
      keepalive_timeout 60;  # keepalive_timeout设置客户端连接保持活动的超时时间。在超过这个时间之后，服务器会关闭该连接；
      client_header_timeout 10;
      client_body_timeout 10;
      send_timeout 10; # send_timeout指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。

HttpGzip模块配置
      gzip on;  # gzip用于设置开启或者关闭gzip模块，“gzip on”表示开启GZIP压缩，实时压缩输出数据流；
      gzip_min_length 1k;
      gzip_buffers 4 16k;
      gzip_http_version 1.1;
      gzip_comp_level 2;
      gzip_types text/plain application/x-javascript text/css application/xml;
      gzip_vary on;

负载均衡配置

   upstream cszhi.com{
      ip_hash;
      server 192.168.8.11:80;
      server 192.168.8.12:80 down;
      server 192.168.8.13:8009 max_fails=3 fail_timeout=20s;
      server 192.168.8.146:8080;
      }
      # upstream是Nginx的HTTP Upstream模块，这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡。
      # 在上面的设定中，通过upstream指令指定了一个负载均衡器的名称cszhi.com。这个名称可以任意指定，在后面需要的地方直接调用即可。

server虚拟主机配置
   server{
      listen 80;
      server_name 192.168.8.18 cszhi.com;
      index index.html index.htm index.php;
      root /wwwroot/www.cszhi.com
      charset gb2312;
      access_log logs/www.ixdba.net.access.log main;

   # server标志定义虚拟主机开始，listen用于指定虚拟主机的服务端口，server_name用来指定IP地址或者域名，多个域名之间用空格分 开。
   # index用于设定访问的默认首页地址，root指令用于指定虚拟主机的网页根目录，这个目录可以是相对路径，也可以是绝对路径。
   # Charset用于 设置网页的默认编码格式。access_log用来指定此虚拟主机的访问日志存放路径，最后的main用于指定访问日志的输出格式。


#    执行server块的rewrite指令
# 执行location匹配
# 执行选定的location中的rewrite指令
# 如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；循环超过10次，则返回500 Internal Server Error错误。

# flag标志位

# last : 相当于Apache的[L]标记，表示完成rewrite
# break : 停止执行当前虚拟主机的后续rewrite指令集
# redirect : 返回302临时重定向，地址栏会显示跳转后的地址
# permanent : 返回301永久重定向，地址栏会显示跳转后的地址
# 因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：

# last一般写在server和if中，而break一般使用在location中
# last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配
# break和last都能终止继续执行后面的rewrite指令

# if指令与全局变量

# if判断指令
# 语法为if(condition){...}，对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行，if条件(conditon)可以是如下任何内容：

# 当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false
# 直接比较变量和内容时，使用=或!=
# ~正则表达式匹配，~*不区分大小写的匹配，!~区分大小写的不匹配
# -f和!-f用来判断是否存在文件
# -d和!-d用来判断是否存在目录
# -e和!-e用来判断是否存在文件或目录
# -x和!-x用来判断文件是否可执行

# 例如：

# if ($http_user_agent ~ MSIE) {
#   rewrite ^(.*)$ /msie/$1 break;
# } //如果UA包含"MSIE"，rewrite请求到/msid/目录下

# if ($http_cookie ~* "id=([^;]+)(?:;|$)") {
#   set $id $1;
#  } //如果cookie匹配正则，设置变量$id等于正则引用部分

# if ($request_method = POST) {
#   return 405;
# } //如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302

# if ($slow) {
#   limit_rate 10k;
# } //限速，$slow可以通过 set 指令设置

# if (!-f $request_filename){
#   break;
#   proxy_pass http://127.0.0.1; 
# } //如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查

# if ($args ~ post=140){
#   rewrite ^ http://example.com/ permanent;
# } //如果query string中包含"post=140"，永久重定向到example.com

# location ~* \.(gif|jpg|png|swf|flv)$ {
#   valid_referers none blocked www.jefflei.com www.leizhenfang.com;
#   if ($invalid_referer) {
#     return 404;
#   } //防盗链
# }

# 全局变量
# 下面是可以用作if判断的全局变量

# $args ： #这个变量等于请求行中的参数，同$query_string
# $content_length ： 请求头中的Content-length字段。
# $content_type ： 请求头中的Content-Type字段。
# $document_root ： 当前请求在root指令中指定的值。
# $host ： 请求主机头字段，否则为服务器名称。
# $http_user_agent ： 客户端agent信息
# $http_cookie ： 客户端cookie信息
# $limit_rate ： 这个变量可以限制连接速率。
# $request_method ： 客户端请求的动作，通常为GET或POST。
# $remote_addr ： 客户端的IP地址。
# $remote_port ： 客户端的端口。
# $remote_user ： 已经经过Auth Basic Module验证的用户名。
# $request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。
# $scheme ： HTTP方法（如http，https）。
# $server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。
# $server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。
# $server_name ： 服务器名称。
# $server_port ： 请求到达服务器的端口号。
# $request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。
# $uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。
# $document_uri ： 与$uri相同。

$arg_PARAMETER #这个变量包含GET请求中，如果有变量PARAMETER时的值。

$args #这个变量等于请求行中(GET请求)的参数，例如foo=123&bar=blahblah;

$binary_remote_addr #二进制的客户地址。

$body_bytes_sent #响应时送出的body字节数数量。即使连接中断，这个数据也是精确的。

$content_length #请求头中的Content-length字段。

$content_type #请求头中的Content-Type字段。

$cookie_COOKIE #cookie COOKIE变量的值

$document_root #当前请求在root指令中指定的值。

$document_uri #与$uri相同。

$host #请求主机头字段，否则为服务器名称。

$hostname #Set to the machine’s hostname as returned by gethostname

$http_HEADER

$is_args #如果有$args参数，这个变量等于”?”，否则等于”"，空值。

$http_user_agent #客户端agent信息

$http_cookie #客户端cookie信息

$limit_rate #这个变量可以限制连接速率。

$query_string #与$args相同。

$request_body_file #客户端请求主体信息的临时文件名。

$request_method #客户端请求的动作，通常为GET或POST。

$remote_addr #客户端的IP地址。

$remote_port #客户端的端口。

$remote_user #已经经过Auth Basic Module验证的用户名。

$request_completion #如果请求结束，设置为OK. 当请求未结束或如果该请求不是请求链串的最后一个时，为空(Empty)。

$request_method #GET或POST

$request_filename #当前请求的文件路径，由root或alias指令与URI请求生成。

$request_uri #包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。不能修改。

$scheme #HTTP方法（如http，https）。

$server_protocol #请求使用的协议，通常是HTTP/1.0或HTTP/1.1。

$server_addr #服务器地址，在完成一次系统调用后可以确定这个值。

$server_name #服务器名称。

$server_port #请求到达服务器的端口号。

$uri #不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。该值有可能和$request_uri 不一致。$request_uri是浏览器发过来的值。该值是rewrite后的值。例如做了internal redirects后。



# 例：http://localhost:88/test1/test2/test.php
# $host：localhost
# $server_port：88
# $request_uri：http://localhost:88/test1/test2/test.php
# $document_uri：/test1/test2/test.php
# $document_root：/var/www/html
# $request_filename：/var/www/html/test1/test2/test.php

# try_files方法让Ngxin尝试访问后面得$uri链接，并进根据@apache配置进行内部重定向。