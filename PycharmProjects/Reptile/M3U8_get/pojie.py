import base64
from Crypto.Cipher import AES
from binascii import b2a_hex,a2b_hex
import base64
from hashlib import md5


aes_local_key = 'emhlbnFpcGFsbWtleQ==';
aes_local_iv = 'emhlbnFpcGFsbWl2';


secretkey = md5(aes_local_key.encode('utf-8')).hexdigest()[16:32]
secretvi = md5(aes_local_iv.encode('utf-8')).hexdigest()[:16]

print(secretkey,secretvi)
# 3c06ccb862a7f3b7 b79d844d6b437a7c

 # 如果text不足16位的倍数就用空格补足为16位
def add_to_16(text):

    if len(text.encode('utf-8')) % 16:
        add = 16 - (len(text.encode('utf-8')) % 16)
    else:
        add = 0
    text = text + ('\0' * add)
    return text.encode('utf-8')

print(bas)


 # 解密后，去掉补足的空格用strip() 去掉
def decrypt():
    bas = ''

    key = '3c06ccb862a7f3b7'.encode('utf-8')
    print(key)
    iv = b'b79d844d6b437a7c'
    mode = AES.MODE_CBC
    cryptos = AES.new(key, mode, iv)
    plain_text = cryptos.decrypt(bas)
    # return bytes.decode(plain_text).rstrip('\0')
    return plain_text

redata = decrypt()
print(redata)
result = base64.b64decode(redata)
print(result)

print(base64.b64decode(bas))